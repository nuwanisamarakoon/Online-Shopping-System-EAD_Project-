name: Build, Push Docker Images and Deploy to AWS EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/service-registry/**'
      - 'backend/api-gateway/**'
      - 'backend/user-management/**'
      - 'backend/product-management/**'
      - 'backend/order-management/**'
      - 'backend/payment-management/**'
      # Add paths for other services as needed
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - service-registry
          - api-gateway
          - user-management
          - product-management
          - order-management
          - payment-management
          # Add other services as needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine if service folder changed
        id: changes
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            git fetch --prune --unshallow
          fi
          if git diff --name-only HEAD~1 HEAD | grep -q "^backend/${{ matrix.service }}/"; then
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        if: env.changed == 'true'
        uses: docker/build-push-action@v2
        with:
          context: ./backend/${{ matrix.service }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest


      - name: Create PEM file
        if: env.changed == 'true'
        run: |
          echo "${{ secrets.EC2_PEM }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Upload docker-compose-deploy.yml
        if: env.changed == 'true'
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ec2-key.pem ./backend/docker-compose-deploy.yml ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/docker-compose-deploy.yml

      - name: Deploy to AWS EC2
        if: env.changed == 'true'
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            sudo yum update -y || sudo apt-get update -y

            # Export AWS secrets to the environment
            export AWS_ACCESS=${{ secrets.AWS_ACCESS }}
            export AWS_SECRET=${{ secrets.AWS_SECRET }}
            export AWS_ACCOUNT_NO=${{ secrets.AWS_ACCOUNT_NO }}
            export S3_BUCKET=${{ secrets.S3_BUCKET }}
            export S3_REGION=${{ secrets.S3_REGION }}

            echo "AWS_ACCESS=${{ secrets.AWS_ACCESS }}" > /home/ec2-user/.env
            echo "AWS_SECRET=${{ secrets.AWS_SECRET }}" >> /home/ec2-user/.env
            echo "AWS_ACCOUNT_NO=${{ secrets.AWS_ACCOUNT_NO }}" >> /home/ec2-user/.env
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> /home/ec2-user/.env
            echo "S3_REGION=${{ secrets.S3_REGION }}" >> /home/ec2-user/.env

            # Pull the latest Docker image and deploy using Docker Compose
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
            sudo docker-compose --env-file /home/ec2-user/.env -f /home/ec2-user/docker-compose-deploy.yml up -d --pull always
          EOF
      - name: Clean up PEM file
        if: env.changed == 'true'
        run: |
          rm ec2-key.pem